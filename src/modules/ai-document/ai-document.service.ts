import { Injectable } from '@nestjs/common';
import { GoogleGenAI } from '@google/genai';
import {
  PESTICIDE_MIXING_DOCUMENT_TEXT,
  PESTICIDE_MIXING_REFERENCE_LINKS,
} from './data/pesticide-mixing.data';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class AiDocumentService {
  private ai: GoogleGenAI;
  private readonly model = 'gemini-2.5-flash';

  constructor(private configService: ConfigService) {
    const apiKey = this.configService.get<string>('GOOGLE_AI_API_KEY');
    if (!apiKey) {
      throw new Error('GOOGLE_AI_API_KEY not found in environment variables.');
    }
    this.ai = new GoogleGenAI({ apiKey });
  }

  /**
   * Th·ª±c hi·ªán truy v·∫•n AI, k·∫øt h·ª£p RAG (t√†i li·ªáu n·ªôi b·ªô) v√† tr·∫£ l·ªùi c√¢u h·ªèi.
   * @param userQuestion C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns C√¢u tr·∫£ l·ªùi t·ª´ AI
   */
  async getDocumentAnswer(userQuestion: string): Promise<string> {
    // 1. T·∫°o Prompt cu·ªëi c√πng v·ªõi d·ªØ li·ªáu RAG
    const finalPrompt = `
      H√£y s·ª≠ d·ª•ng t√†i li·ªáu h∆∞·ªõng d·∫´n ph·ªëi tr·ªôn thu·ªëc B·∫£o V·ªá Th·ª±c V·∫≠t sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi.
      N·∫øu th√¥ng tin trong t√†i li·ªáu kh√¥ng ƒë·ªß, h√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm Google ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin b·ªï sung v√† tr·∫£ l·ªùi c√¢u h·ªèi.

      --- T√ÄI LI·ªÜU N·ªÄN T·∫¢NG ---
      ${PESTICIDE_MIXING_DOCUMENT_TEXT}
      --- K·∫æT TH√öC T√ÄI LI·ªÜU ---

      --- C√ÅC LI√äN K·∫æT THAM KH·∫¢O ---
      ${PESTICIDE_MIXING_REFERENCE_LINKS.map((link) => `- ${link}`).join('\n')}
      --- K·∫æT TH√öC LI√äN K·∫æT ---

      C√¢u h·ªèi c·∫ßn tr·∫£ l·ªùi: ${userQuestion}
      - Lu√¥n ƒë·ªçc k·ªπ, ph√¢n t√≠ch t√†i li·ªáu v√† ngu·ªìn d·ªØ li·ªáu tr∆∞·ªõc khi tr·∫£ l·ªùi c√¢u h·ªèi.
      - H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát d·ª±a tr√™n t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p.
      - N·∫øu b·∫°n c·∫ßn t√¨m ki·∫øm th√¥ng tin t·ª´ c√°c li√™n k·∫øt ho·∫∑c s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm, h√£y th·ª±c hi·ªán vi·ªác ƒë√≥ ƒë·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t.
      - C·ªë g·∫Øng tr·∫£ l·ªùi v√† gi·∫£i th√≠ch ng·∫Øn g·ªçn t·∫≠p trung v√†o c√¢u h·ªèi th√¥i, ƒë·ªÉ n√¥ng d√¢n vi·ªát d·ªÖ hi·ªÉu kh√¥ng d√πng c√°c t·ª´ ti·∫øng anh v√† t·ª´ vi·∫øt t·∫Øt.
    `;

    try {
      console.log('üöÄ Starting AI processing with Google Search tool...');

      // 2. G·ª≠i y√™u c·∫ßu API v·ªõi c√¥ng c·ª• t√¨m ki·∫øm Google
      const response = await this.ai.models.generateContent({
        model: this.model,
        contents: [{ role: 'user', parts: [{ text: finalPrompt }] }],
        config: {
          // Th√™m c√¥ng c·ª• t√¨m ki·∫øm Google v√†o c·∫•u h√¨nh
          tools: [{ googleSearch: {} }],
        },
      } as any);

      console.log('‚úÖ Received response from AI');

      // 3. Ki·ªÉm tra xem response c√≥ ch·ª©a groundingMetadata kh√¥ng
      if (
        response.candidates &&
        response.candidates[0] &&
        response.candidates[0].groundingMetadata
      ) {
        console.log('‚úÖ Google Search tool is ACTIVE');
      } else {
        console.log('‚ö†Ô∏è  Google Search tool might not be active');
      }

      // 4. Tr·∫£ v·ªÅ vƒÉn b·∫£n k·∫øt qu·∫£
      if (
        response.candidates &&
        response.candidates[0] &&
        response.candidates[0].content &&
        response.candidates[0].content.parts &&
        response.candidates[0].content.parts[0]
      ) {
        const answer = response.candidates[0].content.parts[0].text || '';
        console.log('‚úÖ Successfully extracted answer from response');
        return answer;
      }

      console.log('‚ö†Ô∏è  No answer found in response');
      return '';
    } catch (error) {
      console.error('‚ùå Error calling Gemini API:', error);
      throw new Error('L·ªói khi g·ªçi API AI ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi.');
    }
  }
}
